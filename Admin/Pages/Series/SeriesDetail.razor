@page "/series/detail/{Id}"
@using Admin.Models
@using Admin.Models.Series
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using Blazored.LocalStorage
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h3 class="mb-0">Series Details</h3>
                <div>
                    <button type="button" class="btn btn-primary me-2" @onclick="NavigateToUpdate">
                        <i class="fas fa-edit"></i> Edit
                    </button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="NavigateBack">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    @message
                    <button type="button" class="btn-close" @onclick="() => message = null"></button>
                </div>
            }

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border text-danger" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (series != null)
            {
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h5 class="mb-3">Basic Information</h5>
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Name</label>
                                    <p class="form-control-plaintext">@series.Name</p>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Brand</label>
                                    <p class="form-control-plaintext">@series.BrandName</p>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h5 class="mb-3">Audit Information</h5>
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Created By</label>
                                    <p class="form-control-plaintext">@series.CreatedBy</p>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Created Date</label>
                                    <p class="form-control-plaintext">@series.CreatedDate.ToString("dd/MM/yyyy HH:mm")</p>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Updated By</label>
                                    <p class="form-control-plaintext">@series.UpdatedBy</p>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Updated Date</label>
                                    <p class="form-control-plaintext">@(series.UpdatedDate?.ToString("dd/MM/yyyy HH:mm") ?? "Not updated yet")</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private Series series;
    private string message;
    private bool isSuccess;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSeries();
    }

    private async Task LoadSeries()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            if (!Guid.TryParse(Id, out Guid seriesId))
            {
                message = "Invalid series ID";
                isSuccess = false;
                return;
            }

            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync($"api/Series/getDetail?id={seriesId}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Series>();
                if (result != null)
                {
                    series = result;
                    isSuccess = true;
                }
                else
                {
                    message = "Failed to load series data";
                    isSuccess = false;
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                message = "Series not found";
                isSuccess = false;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Error loading series: {error}";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
            Http.DefaultRequestHeaders.Authorization = null;
            StateHasChanged();
        }
    }

    private void NavigateToUpdate()
    {
        NavigationManager.NavigateTo($"/series/update/{Id}");
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/series");
    }
} 