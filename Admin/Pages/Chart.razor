@page "/chart"
@using System.Net.Http.Headers
@using System.Text.Json
@using Admin.Models
@using Blazored.LocalStorage
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3 class="fw-bold text-center mb-4">📊 Thống kê đơn hàng mỗi ngày</h3>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p class="mt-2">Đang tải dữ liệu...</p>
    </div>
}
else if (Stats != null && Stats.Any())
{
    <canvas id="orderChart" width="800" height="400"></canvas>
}
else
{
    <p class="text-danger">Không có dữ liệu thống kê.</p>
}

@code {
    private bool isLoading = false;
    private List<OrderDailyStatsDto>? Stats;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        var token = await LocalStorage.GetItemAsync<string>("token");
        if (string.IsNullOrWhiteSpace(token))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.GetFromJsonAsync<ApiResponse<List<OrderDailyStatsDto>>>("api/Order/daily?days=7");
        if (response?.IsSuccess == true)
        {
            Stats = response.Data;
        }

        isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Stats != null && Stats.Any())
        {
            var labels = Stats.Select(s => s.Date.ToString("MM-dd")).ToList();
            var values = Stats.Select(s => s.OrderCount).ToList();

            await JSRuntime.InvokeVoidAsync("renderOrderChart", labels, values);
        }
    }

    public class OrderDailyStatsDto
    {
        public DateTime Date { get; set; }
        public int OrderCount { get; set; }
    }
}
