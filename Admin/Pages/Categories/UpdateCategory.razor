@page "/categories/update/{Id}"
@using Admin.Models
@using Admin.Models.Category
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using Blazored.LocalStorage
@using Admin.Services
@inject IImageService imageService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h3 class="mb-0">Update Category</h3>
                <button type="button" class="btn btn-outline-secondary" @onclick="NavigateBack">
                    <i class="fas fa-arrow-left"></i> Back to List
                </button>
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    @message
                    <button type="button" class="btn-close" @onclick="() => message = null"></button>
                </div>
            }

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border text-danger" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (category != null)
            {
                <div class="card">
                    <div class="card-body">
                        <EditForm Model="@category" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label class="form-label">Name</label>
                                <InputText @bind-Value="category.Name" class="form-control" />
                                <ValidationMessage For="@(() => category.Name)" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Current Image</label>
                                @if (!string.IsNullOrEmpty(category.Image))
                                {
                                    <div class="mb-2">
                                        <img src="@imageService.GetImageUrl(category.Image)" 
                                             class="current-image" 
                                             alt="Current category image"
                                             style="max-width: 200px;"
                                             @onerror="HandleImageError" />
                                    </div>
                                }
                                
                                <label class="form-label">New Image (optional)</label>
                                <InputFile OnChange="OnFileChange" class="form-control" accept="image/*" />
                                <small class="text-muted">Max file size: 2MB</small>
                                @if (!string.IsNullOrEmpty(imageDataUrl))
                                {
                                    <div class="mt-2">
                                        <img src="@imageDataUrl" 
                                             class="preview-image" 
                                             alt="New image preview"
                                             style="max-width: 200px;" />
                                        <div class="mt-2 text-muted">
                                            Selected file: @selectedFileName
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="mb-3">
                                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Updating...</span>
                                    }
                                    else
                                    {
                                        <span>Update Category</span>
                                    }
                                </button>
                                <button type="button" class="btn btn-secondary ms-2" @onclick="NavigateBack">Cancel</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private CategoryUpdateRequest category;
    private string message;
    private bool isSuccess;
    private bool isLoading = true;
    private bool isSubmitting;
    private string imageDataUrl;
    private IBrowserFile selectedFile;
    private string selectedFileName;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategory();
    }

    private async Task LoadCategory()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            if (!Guid.TryParse(Id, out Guid categoryId))
            {
                message = "Invalid category ID";
                isSuccess = false;
                return;
            }

            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync($"api/Category/{categoryId}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CategoryUpdateRequest>();
                if (result != null)
                {
                    category = result;
                    isSuccess = true;
                }
                else
                {
                    message = "Failed to load category data";
                    isSuccess = false;
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                message = "Category not found";
                isSuccess = false;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Error loading category: {error}";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
            Http.DefaultRequestHeaders.Authorization = null;
            StateHasChanged();
        }
    }

    private void HandleImageError()
    {
        message = "Failed to load current image";
        isSuccess = false;
        StateHasChanged();
    }

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            if (e.File.Size > 2097152) // 2MB in bytes
            {
                message = "File size must be less than 2MB";
                isSuccess = false;
                return;
            }

            selectedFile = e.File;
            selectedFileName = e.File.Name;

            // Preview image
            var format = e.File.ContentType;
            var resizedImage = await e.File.RequestImageFileAsync(format, 500, 500);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            
            // Clear any previous error messages
            message = null;
        }
        catch (Exception ex)
        {
            message = $"Error processing image: {ex.Message}";
            isSuccess = false;
            imageDataUrl = null;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            message = null;

            if (!Guid.TryParse(Id, out Guid categoryId))
            {
                message = "Invalid category ID";
                isSuccess = false;
                return;
            }

            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                message = "You are not authorized. Please login again.";
                isSuccess = false;
                NavigationManager.NavigateTo("/login");
                return;
            }

            var content = new MultipartFormDataContent();
            content.Add(new StringContent(categoryId.ToString()), "Id");
            content.Add(new StringContent(category.Name), "Name");
            content.Add(new StringContent(category.Image ?? ""), "Image");

            if (selectedFile != null)
            {
                var fileContent = new StreamContent(selectedFile.OpenReadStream());
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(fileContent, "FromFileImages", selectedFile.Name);
            }

            content.Add(new StringContent(DateTime.UtcNow.ToString("o")), "UpdatedDate");

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PutAsync($"api/Category/{categoryId}", content);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse<string>>();
                message = result.Message;
                isSuccess = result.IsSuccess;
                if (isSuccess)
                {
                    await Task.Delay(2000);
                    NavigateBack();
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                message = "You are not authorized. Please login again.";
                isSuccess = false;
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Error: {error}";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isSubmitting = false;
            Http.DefaultRequestHeaders.Authorization = null;
            StateHasChanged();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/categories");
    }
} 