@page "/categories/detail/{Id}"
@using Admin.Models
@using Admin.Models.Category
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using Blazored.LocalStorage
@using Admin.Services
@inject IImageService imageService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h3 class="mb-0">Category Details</h3>
                <div>
                    <a href="/categories/update/@Id" class="btn btn-primary me-2">
                        <i class="fas fa-edit"></i> Edit
                    </a>
                    <button type="button" class="btn btn-outline-secondary" @onclick="NavigateBack">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    @message
                    <button type="button" class="btn-close" @onclick="() => message = null"></button>
                </div>
            }

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (category != null)
            {
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4 text-center mb-4">
                                @if (!string.IsNullOrEmpty(category.Image))
                                {
                                    <img src="@imageService.GetImageUrl(category.Image)" 
                                         class="img-fluid rounded" 
                                         alt="@category.Name"
                                         style="max-width: 100%; height: auto;"
                                         @onerror="HandleImageError" />
                                }
                                else
                                {
                                    <div class="text-muted">
                                        <i class="fas fa-image fa-3x"></i>
                                        <p>No image available</p>
                                    </div>
                                }
                            </div>
                            <div class="col-md-8">
                                <h4 class="mb-3">@category.Name</h4>
                                
                                <div class="mb-3">
                                    <h6 class="text-muted mb-2">Created Information</h6>
                                    <p class="mb-1"><strong>Created By:</strong> @category.CreatedBy</p>
                                    <p class="mb-1"><strong>Created Date:</strong> @category.CreatedDate.ToString("dd/MM/yyyy HH:mm")</p>
                                </div>

                                <div class="mb-3">
                                    <h6 class="text-muted mb-2">Last Updated</h6>
                                    <p class="mb-1"><strong>Updated By:</strong> @category.UpdatedBy</p>
                                    <p class="mb-1"><strong>Updated Date:</strong> @category.UpdatedDate.ToString("dd/MM/yyyy HH:mm")</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private CategoryDetailResponse category;
    private string message;
    private bool isSuccess;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategory();
    }

    private async Task LoadCategory()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            if (!Guid.TryParse(Id, out Guid categoryId))
            {
                message = "Invalid category ID";
                isSuccess = false;
                return;
            }

            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync($"api/Category/{categoryId}");
            
            if (response.IsSuccessStatusCode)
            {
                category = await response.Content.ReadFromJsonAsync<CategoryDetailResponse>();
                if (category != null)
                {
                    isSuccess = true;
                }
                else
                {
                    message = "Failed to load category data";
                    isSuccess = false;
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                message = "Category not found";
                isSuccess = false;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Error loading category: {error}";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
            Http.DefaultRequestHeaders.Authorization = null;
            StateHasChanged();
        }
    }

    private void HandleImageError()
    {
        message = "Failed to load category image";
        isSuccess = false;
        StateHasChanged();
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/categories");
    }
} 