@page "/profile"
@using Admin.Models
@using Admin.Models.Authentication
@using Admin.Services
@using System.Net.Http.Headers
@using Blazored.LocalStorage
@inject IImageService imageService
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<div class="container-fluid">
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body text-center">
                    <div class="profile-image-container">
                        @if (!string.IsNullOrEmpty(profile?.Image))
                        {
                            <img src="@imageService.GetImageUrl(profile.Image)" 
                                 alt="Profile Image" 
                                 class="profile-image" />
                        }
                        else
                        {
                            <div class="profile-image-placeholder">
                                <i class="fas fa-user"></i>
                            </div>
                        }
                    </div>
                    <h3 class="mt-3">@profile?.Name</h3>
                    <p class="text-muted">@profile?.Email</p>
                    <p class="text-muted">@profile?.Phone</p>
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4>Profile Information</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Full Name</label>
                                <input type="text" class="form-control" value="@profile?.Name" readonly />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" value="@profile?.Email" readonly />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Phone Number</label>
                                <input type="tel" class="form-control" value="@profile?.Phone" readonly />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Profile Image</label>
                                <input type="text" class="form-control" value="@profile?.Image" readonly />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .profile-image-container {
        width: 150px;
        height: 150px;
        margin: 0 auto;
        position: relative;
        border-radius: 50%;
        overflow: hidden;
        background-color: #f8f9fa;
    }

    .profile-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .profile-image-placeholder {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #e9ecef;
        color: #6c757d;
    }

    .profile-image-placeholder i {
        font-size: 4rem;
    }

    .card {
        margin-bottom: 1.5rem;
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .card-header {
        background-color: #fff;
        border-bottom: 1px solid rgba(0, 0, 0, 0.125);
        padding: 1rem 1.25rem;
    }

    .card-header h4 {
        margin: 0;
        color: #212529;
    }

    .form-label {
        font-weight: 500;
        color: #495057;
    }

    .form-control:read-only {
        background-color: #f8f9fa;
    }
</style>

@code {
    private ProfileResponse profile;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }

    private async Task LoadProfile()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync("api/Authentication/Profile");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ProfileResponse>();
                if (result != null)
                {
                    profile = result;
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error loading profile");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error loading profile");
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            Http.DefaultRequestHeaders.Authorization = null;
            isLoading = false;
            StateHasChanged();
        }
    }
} 