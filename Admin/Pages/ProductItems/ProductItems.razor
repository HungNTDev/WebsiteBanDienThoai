@page "/product-items"
@using Admin.Models
@using Admin.Models.ProductItem
@using Admin.Services
@inject IImageService imageService
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">Product Items</h1>
        <a href="/product-items/create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Create New
        </a>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search product items..."
                        @bind="searchTerm" @bind:event="oninput"
                        @onkeyup="HandleSearchKeyUp" />
                        <button class="btn btn-primary" type="button" @onclick="HandleSearch">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                    @if (!string.IsNullOrEmpty(searchTerm))
                    {
                        <small class="text-muted mt-1">
                            Press Enter to search or click the search button
                        </small>
                    }
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (productItems?.Items == null || !productItems.Items.Any())
            {
                <div class="alert alert-info">
                    @if (!string.IsNullOrEmpty(searchTerm))
                    {
                        <span>No product items found matching "<strong>@searchTerm</strong>"</span>
                    }
                    else
                    {
                        <span>No product items found.</span>
                    }
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th style="width: 80px;">Image</th>
                                <th @onclick="@(() => SortBy("Name"))" style="cursor: pointer">
                                    Name
                                    @if (sortColumn == "Name")
                                    {
                                        <i class="fas fa-sort-@(isDescending ? "down" : "up")"></i>
                                    }
                                </th>
                                <th @onclick="@(() => SortBy("Price"))" style="cursor: pointer">
                                    Price
                                    @if (sortColumn == "Price")
                                    {
                                        <i class="fas fa-sort-@(isDescending ? "down" : "up")"></i>
                                    }
                                </th>
                                <th @onclick="@(() => SortBy("CreatedBy"))" style="cursor: pointer">
                                    Created By
                                    @if (sortColumn == "CreatedBy")
                                    {
                                        <i class="fas fa-sort-@(isDescending ? "down" : "up")"></i>
                                    }
                                </th>
                                <th @onclick="@(() => SortBy("CreateDate"))" style="cursor: pointer">
                                    Created Date
                                    @if (sortColumn == "CreateDate")
                                    {
                                        <i class="fas fa-sort-@(isDescending ? "down" : "up")"></i>
                                    }
                                </th>
                                <th style="width: 100px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in productItems.Items)
                            {
                                <tr>
                                    <td>
                                        <img src="@item.Image" alt="@item.Name"
                                        class="img-thumbnail" style="width: 60px; height: 60px; object-fit: cover;" />
                                    </td>
                                    <td>@item.Name</td>
                                    <td>@item.Price.ToString("N0") Ä‘</td>
                                    <td>@item.CreatedBy</td>
                                    <td>@item.CreatedDate.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>
                                        <div class="btn-group">
                                            <a href="/product-items/detail/@item.Id" class="btn btn-sm btn-info" title="View Details">
                                                <i class="fas fa-info-circle"></i>
                                            </a>
                                            <a href="/product-items/update/@item.Id" class="btn btn-sm btn-warning" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteProductItem(item.Id)" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-between align-items-center mt-4">
                    <div>
                        Showing @((productItems.PageIndex - 1) * productItems.PageSize + 1) to
                        @(Math.Min(productItems.PageIndex * productItems.PageSize, productItems.TotalCount))
                        of @productItems.TotalCount entries
                    </div>
                    <nav>
                        <ul class="pagination mb-0">
                            <li class="page-item @(productItems.HasPreviousPage ? "" : "disabled")">
                                <button class="page-link" @onclick="@(() => LoadData(productItems.PageIndex - 1))">
                                    Previous
                                </button>
                            </li>
                            @for (int i = 1; i <= productItems.TotalPages; i++)
                            {
                                var pageNumber = i;
                                <li class="page-item @(pageNumber == productItems.PageIndex ? "active" : "")">
                                    <button class="page-link" @onclick="@(() => LoadData(pageNumber))">
                                        @i
                                    </button>
                                </li>
                            }
                            <li class="page-item @(productItems.HasNextPage ? "" : "disabled")">
                                <button class="page-link" @onclick="@(() => LoadData(productItems.PageIndex + 1))">
                                    Next
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private PaginatedList<ProductItem> productItems;
    private bool isLoading = true;
    private string searchTerm = "";
    private string sortColumn = "Name";
    private bool isDescending = false;
    private int pageSize = 3;

    protected override async Task OnInitializedAsync()
    {
        await LoadData(1);
    }

    private async Task LoadData(int pageIndex)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var response = await Http.GetFromJsonAsync<ApiResponse<PaginatedList<ProductItem>>>(
                $"api/ProductItem/all?PageIndex={pageIndex}&PageSize={pageSize}&SearchTerm={Uri.EscapeDataString(searchTerm)}&SortColumn={sortColumn}&IsDescending={isDescending}");

            if (response != null && response.IsSuccess)
            {
                productItems = response.Data;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error loading product items");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error loading product items");
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await HandleSearch();
        }
    }

    private async Task HandleSearch()
    {
        await LoadData(1);
    }

    private async Task SortBy(string column)
    {
        if (sortColumn == column)
        {
            isDescending = !isDescending;
        }
        else
        {
            sortColumn = column;
            isDescending = false;
        }
        await LoadData(1);
    }

    private async Task DeleteProductItem(string id)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", new[]
        { "Are you sure you want to delete this product item?" }))
            return;
        try
        {
            var response = await Http.DeleteAsync($"api/ProductItem/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadData(productItems.PageIndex);
            }
        }
        catch (Exception)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error deleting product item");
        }
    }
} 