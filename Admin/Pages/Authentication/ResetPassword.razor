@page "/resetpassword"
@layout LoginLayout
@using Admin.Models
@using Admin.Models.Authentication
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="container">
    <div class="login-box">
        <div class="login-header">
            <div class="login-logo">
                <img src="https://static-account.cellphones.com.vn/_nuxt/img/Shipper_CPS3.77d4065.png" alt="CellphoneS" />
            </div>
            <h1>Reset Password</h1>
            <p>Please enter your new password</p>
        </div>

        <EditForm Model="resetPasswordRequest" OnValidSubmit="HandleResetPassword">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger")">
                    @message
                </div>
            }

            <div class="form-group">
                <label>New Password <span class="required-field">*</span></label>
                <InputText type="password" class="form-control" @bind-Value="resetPasswordRequest.Model.NewPassword" placeholder="Enter new password" />
                <ValidationMessage For="@(() => resetPasswordRequest.Model.NewPassword)" />
            </div>

            <div class="form-group">
                <label>Confirm Password <span class="required-field">*</span></label>
                <InputText type="password" class="form-control" @bind-Value="resetPasswordRequest.Model.ConfirmPassword" placeholder="Confirm new password" />
                <ValidationMessage For="@(() => resetPasswordRequest.Model.ConfirmPassword)" />
            </div>

            <div class="form-submit">
                <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Processing...</span>
                    }
                    else
                    {
                        <span>Reset Password</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private ResetPasswordRequest resetPasswordRequest;
    private bool isLoading = false;
    private bool isSuccess = false;
    private string message = string.Empty;
    private string email;
    private string token;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var emailValue))
        {
            email = emailValue.First();
        }
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var tokenValue))
        {
            token = tokenValue.First();
        }

        resetPasswordRequest = new ResetPasswordRequest
        {
            Model = new ResetPasswordModel
            {
                Email = email,
                Token = token
            }
        };
    }

    private async Task HandleResetPassword()
    {
        try
        {
            isLoading = true;
            message = string.Empty;

            var response = await Http.PostAsJsonAsync("api/Authentication/resetpassword", resetPasswordRequest);
            var result = await response.Content.ReadFromJsonAsync<ApiResponse<object>>();

            if (result.IsSuccess)
            {
                isSuccess = true;
                message = "Your password has been reset successfully. You can now login with your new password.";
                await Task.Delay(2000); // Wait for 2 seconds
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                isSuccess = false;
                message = result.Message ?? "An error occurred. Please try again later.";
            }
        }
        catch (Exception)
        {
            isSuccess = false;
            message = "An error occurred. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }
} 