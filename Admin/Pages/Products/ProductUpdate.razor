@page "/products/update/{id}"
@using Admin.Models
@using Admin.Models.Category
@using Admin.Models.Product
@using Admin.Models.Series
@using Admin.Services
@using System.Net.Http.Headers
@using Blazored.LocalStorage
@inject IImageService imageService
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">Update Product</h1>
        <a href="/products" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Back to List
        </a>
    </div>

    @if (isLoading)
    {
        <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (product == null)
    {
        <div class="alert alert-danger">
            Product not found
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="form-label">Name</label>
                                <InputText @bind-Value="product.Name" class="form-control" />
                                <ValidationMessage For="@(() => product.Name)" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <InputTextArea @bind-Value="product.Description" class="form-control" rows="4" />
                                <ValidationMessage For="@(() => product.Description)" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Price</label>
                                <InputNumber @bind-Value="product.Price" class="form-control" />
                                <ValidationMessage For="@(() => product.Price)" />
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Category</label>
                                        <InputSelect @bind-Value="product.CategoryId" class="form-select">
                                            <option value="">Select Category</option>
                                            @foreach (var category in categories)
                                            {
                                                <option value="@category.Id">@category.Name</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => product.CategoryId)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Series</label>
                                        <InputSelect @bind-Value="product.SeriesId" class="form-select">
                                            <option value="">Select Series</option>
                                            @foreach (var series in seriesList)
                                            {
                                                <option value="@series.Id">@series.Name</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => product.SeriesId)" />
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Image</label>
                                <div class="text-center mb-3">
                                    @if (!string.IsNullOrEmpty(product.Image))
                                    {
                                        <img src="@imageService.GetImageUrl(product.Image)" 
                                             alt="Current Image" 
                                             class="img-fluid rounded" 
                                             style="max-height: 200px; object-fit: contain;" />
                                    }
                                    else
                                    {
                                        <div class="d-flex align-items-center justify-content-center" style="height: 200px;">
                                            <i class="fas fa-image text-muted" style="font-size: 3rem;"></i>
                                        </div>
                                    }
                                </div>
                                <InputFile OnChange="HandleFileSelected" class="form-control" />
                                <small class="text-muted">Max file size: 10MB</small>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                            }
                            Update Product
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private ProductDetailResponse product;
    private List<Category> categories = new();
    private List<Series> seriesList = new();
    private IBrowserFile selectedFile;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string message;
    private bool isSuccess;

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
        await LoadCategories();
        await LoadSeries();
    }

    private async Task LoadProduct()
    {
        try
        {
            if (!Guid.TryParse(Id, out Guid productId))
            {
                message = "Invalid category ID";
                isSuccess = false;
                return;
            }
            isLoading = true;
            StateHasChanged();

            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetFromJsonAsync<ApiResponse<ProductDetailResponse>>($"api/Product/{Id}");

            if (response != null && response.IsSuccess)
            {
                product = response.Data;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error loading product details");
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            Http.DefaultRequestHeaders.Authorization = null;
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            isLoading = true;
            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync("api/Category");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse<PaginatedList<Category>>>();
                if (result != null && result.IsSuccess)
                {
                    categories = result.Data.Items;
                }
            }
        }
        catch (Exception ex)
        {
            message = $"Error loading categories: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
            Http.DefaultRequestHeaders.Authorization = null;
        }
    }

    private async Task LoadSeries()
    {
        try
        {
            isLoading = true;
            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync("api/Series/getAll");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse<PaginatedList<Series>>>();
                if (result != null && result.IsSuccess)
                {
                   seriesList = result.Data.Items;
                }
            }
        }
        catch (Exception ex)
        {
            message = $"Error loading series: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
            Http.DefaultRequestHeaders.Authorization = null;
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            StateHasChanged();

            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var content = new MultipartFormDataContent();
            content.Add(new StringContent(product.Id ?? string.Empty), "Id");
            content.Add(new StringContent(product.Name ?? string.Empty), "Name");
            content.Add(new StringContent(product.Description ?? string.Empty), "Description");
            content.Add(new StringContent(product.Price.ToString()), "Price");
            content.Add(new StringContent(product.CategoryId ?? string.Empty), "CategoryId");
            content.Add(new StringContent(product.SeriesId ?? string.Empty), "SeriesId");
            content.Add(new StringContent(DateTime.UtcNow.ToString("o")), "UpdateDate");
            content.Add(new StringContent(DateTime.UtcNow.ToString("o")), "UpdateDate");

            if (selectedFile != null)
            {
                var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 10485760));
                content.Add(fileContent, "ImageFile", selectedFile.Name);
            }

            if (selectedFile != null)
            {
                Console.WriteLine($"📁 File Name: {selectedFile.Name}");
                Console.WriteLine($"📁 File Size: {selectedFile.Size} bytes");
            }


            var response = await Http.PutAsync($"api/Product/{Id}", content);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Product updated successfully");
                NavigationManager.NavigateTo("/products");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error updating product");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error updating product");
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            Http.DefaultRequestHeaders.Authorization = null;
            isSubmitting = false;
            StateHasChanged();
        }
    }
} 