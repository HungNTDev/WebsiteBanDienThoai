@page "/products/detail/{id}"
@using Admin.Models
@using Admin.Models.Category
@using Admin.Models.Product
@using Admin.Models.Series
@using Admin.Services
@using System.Net.Http.Headers
@using Blazored.LocalStorage
@inject IImageService imageService
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">Product Details</h1>
        <div>
            <a href="/products/update/@Id" class="btn btn-warning me-2">
                <i class="fas fa-edit"></i> Edit
            </a>
            <a href="/products" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to List
            </a>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (product == null)
    {
        <div class="alert alert-danger">
            Product not found
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body text-center">
                        @if (!string.IsNullOrEmpty(product.Image))
                        {
                            <img src="@imageService.GetImageUrl(product.Image)" 
                                 alt="@product.Name" 
                                 class="img-fluid rounded" 
                                 style="max-height: 300px; object-fit: contain;" />
                        }
                        else
                        {
                            <div class="d-flex align-items-center justify-content-center" style="height: 300px;">
                                <i class="fas fa-image text-muted" style="font-size: 5rem;"></i>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-8">
                <div class="card">
                    <div class="card-body">
                        <h3 class="card-title">@product.Name</h3>
                        <div class="mb-4">
                            <h4 class="text-primary">@product.Price.ToString("N0") Ä‘</h4>
                        </div>
                        <div class="mb-4">
                            <h5>Description</h5>
                            <p class="text-muted">@product.Description</p>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <h6 class="text-muted">Category</h6>
                                    <div class="d-flex align-items-center">
                                        <div>
                                            <p class="mb-0">@categoryName</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <h6 class="text-muted">Series</h6>
                                    <div>
                                        <p class="mb-0">@seriesName</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <h6 class="text-muted">Created By</h6>
                                    <p>@product.CreatedBy</p>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <h6 class="text-muted">Created Date</h6>
                                    <p>@product.CreatedDate.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</p>
                                </div>
                            </div>
                        </div>
                        @if (product.UpdatedDate.HasValue)
                        {
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <h6 class="text-muted">Updated By</h6>
                                        <p>@product.UpdatedBy</p>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <h6 class="text-muted">Updated Date</h6>
                                        <p>@product.UpdatedDate.Value.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private ProductDetailResponse product;
    private string categoryName = "Unknown";
    private string seriesName = "Unknown";
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
    }

    private async Task LoadProduct()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetFromJsonAsync<ApiResponse<ProductDetailResponse>>($"api/Product/{Id}");

            if (response != null && response.IsSuccess)
            {
                product = response.Data;
                await LoadCategoryName(product.CategoryId);
                await LoadSeriesName(product.SeriesId);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error loading product details");
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            Http.DefaultRequestHeaders.Authorization = null;
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategoryName(string categoryId)
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync($"api/Category/{categoryId}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CategoryDetailResponse>();
                if (result != null )
                {
                    categoryName = result.Name;
                }
            }
        }
        catch (Exception)
        {
            categoryName = "Unknown";
        }
        finally
        {
            Http.DefaultRequestHeaders.Authorization = null;
        }
    }

    private async Task LoadSeriesName(string seriesId)
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync($"api/Series/getDetail?id={seriesId}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SeriesDetailResponse>();
                if (result != null)
                {
                    seriesName = result.Name;
                }
            }
        }
        catch (Exception)
        {
            seriesName = "Unknown";
        }
        finally
        {
            Http.DefaultRequestHeaders.Authorization = null;
        }
    }
} 