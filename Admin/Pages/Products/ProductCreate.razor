@page "/products/create"
@using Admin.Models
@using Admin.Models.Product
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers
@using Blazored.LocalStorage
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h3>Create Product</h3>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    @message
                    <button type="button" class="btn-close" @onclick="() => message = null"></button>
                </div>
            }

            <EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Name</label>
                        <InputText @bind-Value="product.Name" class="form-control" />
                        <ValidationMessage For="@(() => product.Name)" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Price</label>
                        <InputNumber @bind-Value="product.Price" class="form-control" />
                        <ValidationMessage For="@(() => product.Price)" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Category</label>
                        <InputSelect @bind-Value="product.CategoryId" class="form-select">
                            <option value="">Select a category</option>
                            @foreach (var category in categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => product.CategoryId)" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Series</label>
                        <InputSelect @bind-Value="product.SeriesId" class="form-select">
                            <option value="">Select a series</option>
                            @foreach (var series in seriesList)
                            {
                                <option value="@series.Id">@series.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => product.SeriesId)" />
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <InputTextArea @bind-Value="product.Description" class="form-control" rows="3" />
                    <ValidationMessage For="@(() => product.Description)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Image</label>
                    <InputFile OnChange="HandleFileSelected" class="form-control" />
                    <ValidationMessage For="@(() => product.Image)" />
                    @if (!string.IsNullOrEmpty(imagePreview))
                    {
                        <div class="mt-2">
                            <img src="@imagePreview" alt="Preview" class="img-thumbnail" style="max-height: 200px;" />
                        </div>
                    }
                </div>

                <div class="d-flex justify-content-end gap-2">
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-2">Creating...</span>
                        }
                        else
                        {
                            <span>Create</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private ProductCreateRequest product = new();
    private List<Category> categories = new();
    private List<Series> seriesList = new();
    private string imagePreview;
    private bool isLoading;
    private string message;
    private bool isSuccess;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadSeries();
    }

    private async Task LoadCategories()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetFromJsonAsync<ApiResponse<PaginatedList<Category>>>("api/Category");
            if (response != null && response.IsSuccess)
            {
                categories = response.Data.Items;
            }
        }
        catch (Exception ex)
        {
            message = $"Error loading categories: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            Http.DefaultRequestHeaders.Authorization = null;
        }
    }

    private async Task LoadSeries()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetFromJsonAsync<ApiResponse<PaginatedList<Series>>>("api/Series/getAll");
            if (response != null && response.IsSuccess)
            {
                seriesList = response.Data.Items;
            }
        }
        catch (Exception ex)
        {
            message = $"Error loading series: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            Http.DefaultRequestHeaders.Authorization = null;
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            product.Image = file;
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSize: 10485760).ReadAsync(buffer);
            imagePreview = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isLoading = true;
            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var content = new MultipartFormDataContent();
            content.Add(new StringContent(product.Name), "name");
            content.Add(new StringContent(product.Description), "description");
            content.Add(new StringContent(product.Price.ToString()), "price");
            content.Add(new StringContent(product.CategoryId), "categoryId");
            content.Add(new StringContent(product.SeriesId), "seriesId");

            if (product.Image != null)
            {
                var fileContent = new StreamContent(product.Image.OpenReadStream(maxAllowedSize: 10485760));
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(product.Image.ContentType);
                content.Add(fileContent, "ImageFile", product.Image.Name);
            }

            var response = await Http.PostAsync("api/Product", content);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse<string>>();
                message = result.Message;
                isSuccess = result.IsSuccess;
                if (isSuccess)
                {
                    NavigationManager.NavigateTo("/products");
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                message = "You are not authorized. Please login again.";
                isSuccess = false;
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Error: {error}";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
            Http.DefaultRequestHeaders.Authorization = null;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/products");
    }

    public class Category
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }

    public class Series
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }
} 