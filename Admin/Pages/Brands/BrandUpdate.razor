@page "/brands/update/{Id}"
@using Admin.Models
@using Admin.Models.Brand
@using Admin.Services
@using Blazored.LocalStorage
@inject IHttpService HttpService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IImageService ImageService

@if (isLoading)
{
    <div class="text-center p-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (brand == null)
{
    <div class="alert alert-danger">
        Brand not found.
    </div>
}
else
{
    <div class="container-fluid">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h3 mb-0">Update Brand</h1>
            <a href="/brands" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to List
            </a>
        </div>

        <div class="card">
            <div class="card-body">
                <EditForm Model="@brand" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="brand.Name" />
                        <ValidationMessage For="@(() => brand.Name)" />
                    </div>

                    <div class="mb-3">
                        <label for="image" class="form-label">Current Image</label>
                        @if (!string.IsNullOrEmpty(brand.Image))
                        {
                            <div class="mb-2">
                                <img src="@ImageService.GetImageUrl(brand.Image)" alt="@brand.Name" 
                                     class="img-thumbnail" style="max-width: 200px;" />
                            </div>
                        }
                        <InputFile id="image" class="form-control" OnChange="OnFileSelected" accept="image/*" />
                        @if (imagePreview != null)
                        {
                            <div class="mt-2">
                                <img src="@imagePreview" class="img-thumbnail" style="max-width: 200px;" />
                                <div class="mt-1">
                                    <small class="text-muted">New image preview</small>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="text-end">
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="ms-2">Saving...</span>
                            }
                            else
                            {
                                <span>Save Changes</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Brand brand;
    private bool isLoading = true;
    private bool isSaving = false;
    private IBrowserFile selectedFile;
    private string imagePreview;

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            await LoadBrandDetails();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Initialization error: {ex.Message}");
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task LoadBrandDetails()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // API trả về trực tiếp đối tượng Brand
            brand = await HttpService.GetFromJsonAsync<Brand>($"api/Brand/detail/{Id}");
            Console.WriteLine($"API Response: {System.Text.Json.JsonSerializer.Serialize(brand)}");

            if (brand == null)
            {
                Console.WriteLine("API Error: Brand not found");
                await JSRuntime.InvokeVoidAsync("alert", "Brand not found");
                NavigationManager.NavigateTo("/brands");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Load details error: {ex.Message}");
            if (ex.Message.Contains("404"))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Brand not found");
            }
            else if (ex.Message.Contains("ERR_CONNECTION_REFUSED"))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Cannot connect to server. Please try again later.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error loading brand details");
            }
            NavigationManager.NavigateTo("/brands");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFile = e.File;
            if (selectedFile != null)
            {
                var buffer = new byte[selectedFile.Size];
                await selectedFile.OpenReadStream().ReadAsync(buffer);
                imagePreview = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"File selection error: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error processing selected file");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSaving = true;
            StateHasChanged();

            var content = new MultipartFormDataContent();
            content.Add(new StringContent(Id), "Id");
            content.Add(new StringContent(brand.Name), "Name");
            
            if (selectedFile != null)
            {
                var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 10485760));
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(fileContent, "formFile", selectedFile.Name);
            }
            else
            {
                // Nếu không có file mới, gửi ảnh hiện tại
                content.Add(new StringContent(brand.Image ?? ""), "Image");
            }

            // Thêm ngày cập nhật
            content.Add(new StringContent(DateTime.UtcNow.ToString("o")), "UpdatedDate");

            // Sử dụng đúng endpoint update từ server
            var response = await HttpService.PutAsync<string>($"api/Brand/update/{Id}", content);
            Console.WriteLine($"Update Response: {System.Text.Json.JsonSerializer.Serialize(response)}");

            if (response != null && response.IsSuccess)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Brand updated successfully");
                NavigationManager.NavigateTo("/brands");
            }
            else
            {
                var errorMessage = response?.Message ?? "Error updating brand";
                Console.WriteLine($"API Error: {errorMessage}");
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Update error: {ex.Message}");
            if (ex.Message.Contains("ERR_CONNECTION_REFUSED"))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Cannot connect to server. Please try again later.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error updating brand");
            }
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
} 