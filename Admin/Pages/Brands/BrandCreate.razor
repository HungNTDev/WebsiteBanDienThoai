@page "/brands/create"
@using Admin.Models
@using Admin.Models.Brand
@using Admin.Services
@using Blazored.LocalStorage
@inject IHttpService HttpService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

@if (isLoading)
{
    <div class="text-center p-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h3 mb-0">Create Brand</h1>
            <a href="/brands" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to List
            </a>
        </div>

        <div class="card">
            <div class="card-body">
                <EditForm Model="@brand" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="brand.Name" />
                        <ValidationMessage For="@(() => brand.Name)" />
                    </div>

                    <div class="mb-3">
                        <label for="image" class="form-label">Image</label>
                        <InputFile id="image" class="form-control" OnChange="OnFileSelected" accept="image/*" />
                        @if (imagePreview != null)
                        {
                            <div class="mt-2">
                                <img src="@imagePreview" class="img-thumbnail" style="max-width: 200px;" />
                            </div>
                        }
                    </div>

                    <div class="text-end">
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="ms-2">Creating...</span>
                            }
                            else
                            {
                                <span>Create Brand</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private Brand brand = new Brand();
    private bool isSaving = false;
    private bool isLoading = true;
    private IBrowserFile selectedFile;
    private string imagePreview;

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("token");
        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        isLoading = false;
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            var buffer = new byte[selectedFile.Size];
            await selectedFile.OpenReadStream().ReadAsync(buffer);
            imagePreview = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSaving = true;
            StateHasChanged();

            var content = new MultipartFormDataContent();
            content.Add(new StringContent(brand.Name), "Name");
            
            if (selectedFile != null)
            {
                var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 10485760)); // 10MB max
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(fileContent, "formFile", selectedFile.Name);
            }

            var response = await HttpService.PostAsync<string>("api/Brand/create", content);

            if (response.IsSuccess)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Brand created successfully");
                NavigationManager.NavigateTo("/brands");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", response.Message ?? "Error creating brand");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error creating brand");
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
} 