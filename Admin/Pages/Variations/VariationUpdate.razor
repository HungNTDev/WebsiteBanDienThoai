@page "/variations/update/{Id}"
@using Admin.Models
@using Admin.Models.Variation
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using Blazored.LocalStorage
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h3 class="mb-0">Update Variation</h3>
                <button type="button" class="btn btn-outline-secondary" @onclick="NavigateBack">
                    <i class="fas fa-arrow-left"></i> Back to List
                </button>
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    @message
                    <button type="button" class="btn-close" @onclick="() => message = null"></button>
                </div>
            }

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border text-danger" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (variation != null)
            {
                <div class="card">
                    <div class="card-body">
                        <div class="mb-4">
                            <h5>Variation Information</h5>
                            <hr />
                            <div class="row">
                                <div class="col-md-6">
                                    <p><strong>Created By:</strong> @variationDetail.CreatedBy</p>
                                    <p><strong>Created Date:</strong> @variationDetail.CreatedDate.ToString("dd/MM/yyyy HH:mm")</p>
                                </div>
                                <div class="col-md-6">
                                    <p><strong>Updated By:</strong> @variationDetail.UpdatedBy</p>
                                    <p><strong>Updated Date:</strong> @(variationDetail.UpdatedDate?.ToString("dd/MM/yyyy HH:mm") ?? "Not updated yet")</p>
                                </div>
                            </div>
                        </div>

                        <EditForm Model="@variation" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label class="form-label">Name</label>
                                <InputText @bind-Value="variation.Name" class="form-control" />
                                <ValidationMessage For="@(() => variation.Name)" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Category</label>
                                <InputSelect @bind-Value="variation.CategoryId" class="form-control">
                                    <option value="">Select a category</option>
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => variation.CategoryId)" />
                            </div>

                            <div class="mb-3">
                                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-2">Updating...</span>
                                    }
                                    else
                                    {
                                        <span>Update Variation</span>
                                    }
                                </button>
                                <button type="button" class="btn btn-secondary ms-2" @onclick="NavigateBack">Cancel</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private VariationUpdateRequest variation;
    private VariationDetailResponse variationDetail;
    private List<Category> categories = new();
    private string message;
    private bool isSuccess;
    private bool isLoading = true;
    private bool isSubmitting;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadVariation();
    }

    private async Task LoadCategories()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync("api/Category");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse<PaginatedList<Category>>>();
                if (result != null && result.IsSuccess)
                {
                    categories = result.Data.Items;
                }
            }
        }
        catch (Exception ex)
        {
            message = $"Error loading categories: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            Http.DefaultRequestHeaders.Authorization = null;
        }
    }

    private async Task LoadVariation()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            if (!Guid.TryParse(Id, out Guid variationId))
            {
                message = "Invalid variation ID";
                isSuccess = false;
                return;
            }

            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync($"api/Variation/{variationId}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<VariationDetailResponse>();
                if (result != null)
                {
                    variationDetail = result;
                    variation = new VariationUpdateRequest
                    {
                        Id = result.Id,
                        Name = result.Name,
                        CategoryId = "" // CategoryId will be set when user selects a new category
                    };
                    isSuccess = true;
                }
                else
                {
                    message = "Failed to load variation data";
                    isSuccess = false;
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                message = "Variation not found";
                isSuccess = false;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Error loading variation: {error}";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
            Http.DefaultRequestHeaders.Authorization = null;
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            message = null;

            if (!Guid.TryParse(Id, out Guid variationId))
            {
                message = "Invalid variation ID";
                isSuccess = false;
                return;
            }

            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                message = "You are not authorized. Please login again.";
                isSuccess = false;
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PutAsJsonAsync($"api/Variation/{variationId}", variation);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse<string>>();
                message = result.Message;
                isSuccess = result.IsSuccess;
                if (isSuccess)
                {
                    await Task.Delay(2000);
                    NavigateBack();
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                message = "You are not authorized. Please login again.";
                isSuccess = false;
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Error: {error}";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isSubmitting = false;
            Http.DefaultRequestHeaders.Authorization = null;
            StateHasChanged();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/variations");
    }

    public class Category
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }

    public class PaginatedList<T>
    {
        public List<T> Items { get; set; }
        public int PageIndex { get; set; }
        public int TotalPages { get; set; }
        public int TotalCount { get; set; }
        public int PageSize { get; set; }
        public bool HasPreviousPage { get; set; }
        public bool HasNextPage { get; set; }
    }

    public class ApiResponse<T>
    {
        public bool IsSuccess { get; set; }
        public string Message { get; set; }
        public T Data { get; set; }
        public object Errors { get; set; }
        public int StatusCode { get; set; }
        public DateTime Timestamp { get; set; }
    }
} 