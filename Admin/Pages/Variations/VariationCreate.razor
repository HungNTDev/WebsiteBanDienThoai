@page "/variations/create"
@using Admin.Models
@using Admin.Models.Variation
@using System.Net.Http.Headers
@using Blazored.LocalStorage
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <h3 class="mb-4">Create Variation</h3>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    @message
                    <button type="button" class="btn-close" @onclick="() => message = null"></button>
                </div>
            }

            <EditForm Model="@variation" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <InputText @bind-Value="variation.Name" class="form-control" />
                    <ValidationMessage For="@(() => variation.Name)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Category</label>
                    <InputSelect @bind-Value="variation.CategoryId" class="form-control">
                        <option value="">Select a category</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => variation.CategoryId)" />
                </div>

                <div class="mb-3">
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-2">Creating...</span>
                        }
                        else
                        {
                            <span>Create Variation</span>
                        }
                    </button>
                    <button type="button" class="btn btn-secondary ms-2" @onclick="NavigateBack">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private VariationCreateRequest variation = new();
    private List<Category> categories = new();
    private string message;
    private bool isSuccess;
    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync("api/Category");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse<PaginatedList<Category>>>();
                if (result != null && result.IsSuccess)
                {
                    categories = result.Data.Items;
                }
            }
        }
        catch (Exception ex)
        {
            message = $"Error loading categories: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            Http.DefaultRequestHeaders.Authorization = null;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isLoading = true;
            message = null;

            if (string.IsNullOrEmpty(variation.CategoryId))
            {
                message = "Please select a category";
                isSuccess = false;
                return;
            }

            var token = await LocalStorage.GetItemAsync<string>("token");
            if (string.IsNullOrEmpty(token))
            {
                message = "You are not authorized. Please login again.";
                isSuccess = false;
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PostAsJsonAsync("api/Variation", variation);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse<string>>();
                message = result.Message;
                isSuccess = result.IsSuccess;
                if (isSuccess)
                {
                    await Task.Delay(2000);
                    NavigateBack();
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                message = "You are not authorized. Please login again.";
                isSuccess = false;
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Error: {error}";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
            Http.DefaultRequestHeaders.Authorization = null;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/variations");
    }

    public class Category
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }
} 