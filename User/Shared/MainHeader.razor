@using Admin.Services
@using User.Models
@using User.Services
@using static System.Net.WebRequestMethods
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject IImageService imageService

<header class="main-header">
    <div class="container">
        <div class="header-content">
            <div class="d-flex align-items-center">
                <a href="/" class="logo me-4">
                    <img src="@imageService.GetImageUrl("Shipper_CPS3.77d4065.png")" alt="CellphoneS" height="40" />
                </a>
                <div class="category-button position-relative">
                    <button class="btn btn-menu" @onclick="ToggleMenu">
                        <i class="bi bi-list me-2"></i>
                        Danh mục
                    </button>
                    <div class="category-dropdown @(isMenuOpen ? "show" : "")">
                        <div class="menu-items">
                            @if (Categories != null)
                            {
                                @foreach (var category in Categories)
                                {
                                    <a href="@($"/{category.Slug}")"
                                       class="menu-item"
                                       @onclick="@(() => NavigateToCategory(category.Slug))"
                                       @onclick:preventDefault>
                                        <i class="@category.Icon"></i>
                                        <span>@category.Name</span>
                                        <i class="bi bi-chevron-right"></i>
                                    </a>
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="location-selector ms-3">
                    <i class="bi bi-geo-alt"></i>
                    Xem giá tại
                    <select class="form-select form-select-sm d-inline-block w-auto border-0">
                        <option>Hồ Chí Minh</option>
                        <option>Hà Nội</option>
                        <option>Đà Nẵng</option>
                    </select>
                </div>
            </div>

            <div class="search-box mx-4">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Bạn cần tìm gì?" />
                    <button class="btn btn-search">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>

            <div class="action-buttons d-flex align-items-center">
                <a href="tel:1800.2097" class="action-button">
                    <i class="bi bi-telephone"></i>
                    <span>
                        Gọi mua hàng<br />
                        <b>1800.2097</b>
                    </span>
                </a>
                <a href="/stores" class="action-button">
                    <i class="bi bi-shop"></i>
                    <span>Cửa hàng<br />gần bạn</span>
                </a>

                @if (IsLoggedIn)
                {
                    <a href="/order-history" class="action-button">
                        <i class="bi bi-box-seam"></i>
                        <span>Tra cứu<br />đơn hàng</span>
                    </a>

                    <a href="/cart" class="action-button cart">
                        <i class="bi bi-cart3"></i>
                        <span>Giỏ<br />hàng</span>
                    </a>

                    <div class="dropdown d-inline-block ms-3">
                        <a class="btn btn-outline-light dropdown-toggle d-flex align-items-center gap-2"
                           href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-person-circle fs-5"></i>
                            <span>@UserName</span>
                        </a>

                        <ul class="dropdown-menu dropdown-menu-end shadow-sm mt-2">
                            <li>
                                <a class="dropdown-item d-flex align-items-center gap-2" href="/profile">
                                    <i class="bi bi-person-lines-fill text-primary"></i> Hồ sơ cá nhân
                                </a>
                            </li>
                            <li><hr class="dropdown-divider" /></li>
                            <li>
                                <button class="dropdown-item d-flex align-items-center gap-2 text-danger fw-semibold" @onclick="HandleLogout">
                                    <i class="bi bi-box-arrow-right"></i> Đăng xuất
                                </button>
                            </li>
                        </ul>
                    </div>
                }
                else
                {
                    <a href="/login" class="action-button">
                        <i class="bi bi-box-arrow-in-right"></i>
                        <span>Đăng nhập</span>
                    </a>
                }

            </div>
        </div>
    </div>
</header>

<style>
    .main-header {
        background-color: #D70018;
        padding: 8px 0;
        position: sticky;
        top: 0;
        z-index: 1000;
        height: 60px;
        display: flex;
        align-items: center;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 15px;
        width: 100%;
    }

    .header-content {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .logo {
        display: flex;
        align-items: center;
    }

    .logo img {
        height: 32px;
    }

    .d-flex {
        gap: 8px;
    }

    .btn-menu {
        background-color: rgba(255,255,255,0.2);
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        font-size: 13px;
        display: flex;
        align-items: center;
        gap: 6px;
        height: 32px;
    }

    .btn-menu:hover {
        background-color: rgba(255,255,255,0.3);
        color: white;
    }

    .location-selector {
        color: white;
        font-size: 13px;
        display: flex;
        align-items: center;
        gap: 4px;
        margin-left: 8px;
    }

    .location-selector select {
        color: white;
        background-color: transparent;
        font-size: 13px;
        padding: 0;
        padding-left: 4px;
        height: 32px;
    }

    .location-selector select option {
        color: #333;
    }

    .search-box {
        flex: 1;
        max-width: 500px;
        margin: 0 16px;
    }

    .search-box .input-group {
        background: white;
        border-radius: 4px;
        overflow: hidden;
        height: 32px;
    }

    .search-box .form-control {
        border: none;
        font-size: 13px;
        padding: 0 16px;
        height: 100%;
    }

    .search-box .form-control:focus {
        outline: none;
        box-shadow: none;
    }

    .btn-search {
        background-color: white;
        border: none;
        width: 40px;
        color: #666;
        font-size: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
    }

    .btn-search:hover {
        color: #D70018;
    }

    .action-buttons {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .action-button {
        display: flex;
        align-items: center;
        color: white;
        text-decoration: none;
        font-size: 11px;
        white-space: nowrap;
        gap: 4px;
    }

    .action-button:hover {
        color: rgba(255,255,255,0.9);
    }

    .action-button i {
        font-size: 16px;
    }

    .action-button span {
        line-height: 1.2;
    }

    .action-button.cart {
        position: relative;
    }

    .action-button .badge {
        position: absolute;
        top: -5px;
        right: -5px;
        background-color: white;
        color: #D70018;
        font-size: 10px;
        padding: 0 4px;
        border-radius: 8px;
        border: 1px solid #D70018;
        min-width: 16px;
        height: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .category-dropdown {
        position: absolute;
        top: calc(100% + 8px);
        left: 0;
        width: 280px;
        background: white;
        border-radius: 4px;
        box-shadow: 0 2px 20px rgba(0,0,0,0.15);
        opacity: 0;
        visibility: hidden;
        transform: translateY(-10px);
        transition: all 0.2s ease;
        z-index: 1000;
    }

    .category-dropdown.show {
        opacity: 1;
        visibility: visible;
        transform: translateY(0);
    }

    .menu-items {
        padding: 8px 0;
    }

    .menu-item {
        display: flex;
        align-items: center;
        padding: 8px 16px;
        color: #333;
        text-decoration: none;
        font-size: 13px;
        transition: all 0.2s;
    }

    .menu-item:hover {
        color: #D70018;
        background-color: #f8f9fa;
    }

    .menu-item i:first-child {
        width: 24px;
        font-size: 16px;
    }

    .menu-item span {
        flex: 1;
        margin-left: 8px;
    }

    .menu-item i:last-child {
        font-size: 10px;
        opacity: 0.5;
    }
</style>

@code {
    private bool isMenuOpen = false;
    private List<CategoryDto> Categories = new();
    private bool IsLoggedIn = false;
    private string UserName = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
        await LoadUserAsync();
    }

    private async Task LoadCategoriesAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse<PaginatedList<CategoryDto>>>("https://localhost:7026/api/Category?PageSize=20");
            if (response?.Data?.Items != null)
            {
                Categories = response.Data.Items.Select(x => new CategoryDto
                    {
                        Name = x.Name,
                        Slug = Slugify(x.Name),
                        Icon = "bi bi-tag"
                    }).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi gọi API danh mục: {ex.Message}");
        }
    }

    private async Task HandleLogout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        NavigationManager.NavigateTo("/login", true); 
    }

    private async Task LoadUserAsync()
    {
        var user = await AuthService.GetCurrentUserAsync();
        if (user != null)
        {
            IsLoggedIn = true;
            UserName = user.FullName ?? user.Email ?? "Người dùng";
        }
    }

    private string Slugify(string name)
    {
        return name.ToLower().Replace(" ", "-").Normalize(System.Text.NormalizationForm.FormD);
    }

    private void ToggleMenu()
    {
        isMenuOpen = !isMenuOpen;
    }

    private void NavigateToCategory(string slug)
    {
        NavigationManager.NavigateTo($"/{slug}");
    }

    public class CategoryDto
    {
        public string Name { get; set; }
        public string Slug { get; set; }
        public string Icon { get; set; }
    }
} 