@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="category-dropdown @(IsOpen ? "show" : "")">
    <div class="menu-items">
        @if (Categories != null)
        {
            @foreach (var category in Categories)
            {
                <a href="@($"/{category.Slug}")"
                   class="menu-item"
                   @onclick="@((e) => NavigateToCategory(category.Slug))"
                @onclick:preventDefault>
                    <i class="@category.Icon"></i>
                    <span>@category.Name</span>
                    <i class="bi bi-chevron-right"></i>
                </a>
            }
        }
    </div>
</div>

<style>
    .category-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        width: 280px;
        background: white;
        border-radius: 0 0 10px 10px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        opacity: 0;
        visibility: hidden;
        transform: translateY(-10px);
        transition: all 0.3s ease;
        z-index: 1000;
    }

        .category-dropdown.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

    .menu-items {
        padding: 8px 0;
    }

    .menu-item {
        display: flex;
        align-items: center;
        padding: 8px 16px;
        color: #333;
        text-decoration: none;
        font-size: 14px;
        transition: all 0.2s;
    }

        .menu-item:hover {
            color: #D70018;
            background-color: #f8f9fa;
        }

        .menu-item i:first-child {
            width: 24px;
            font-size: 18px;
        }

        .menu-item span {
            flex: 1;
            margin-left: 8px;
        }

        .menu-item i:last-child {
            font-size: 12px;
            opacity: 0.5;
        }
</style>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    private async Task NavigateToCategory(MouseEventArgs e, string url)
    {
        await IsOpenChanged.InvokeAsync(false);
        NavigationManager.NavigateTo(url);
    }

    private List<CategoryDto> Categories = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Đúng route thực tế: GET /api/Category
            var response = await Http.GetFromJsonAsync<List<CategoryDto>>("api/Category");
            if (response != null)
            {
                Categories = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi lấy danh mục: {ex.Message}");
        }
    }

    private void NavigateToCategory(string slug)
    {
        NavigationManager.NavigateTo($"/{slug}");
    }

    public class CategoryDto
    {
        public string Name { get; set; }
        public string Slug { get; set; }
        public string Icon { get; set; } // optional
    }
}