@page "/cart"
@using Admin.Services
@using User.Models.Cart
@using User.Services
@inject HttpClient Http
@inject ICartService CartService
@inject IImageService ImageService
@inject NavigationManager Navigation

<h3 class="fw-bold text-center mt-4 mb-5">üõí Gi·ªè h√†ng c·ªßa b·∫°n</h3>

@if (Cart == null)
{
    <div class="text-center text-muted">ƒêang t·∫£i gi·ªè h√†ng...</div>
}
else if (!Cart.CartItems.Any())
{
    <div class="text-center text-muted">
        <i class="bi bi-cart-x fs-1"></i>
        <p class="mt-3">Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.</p>
    </div>
}
else
{
    <div class="container">

        <!-- Ti√™u ƒë·ªÅ & x√≥a t·∫•t c·∫£ -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="fw-semibold">S·∫£n ph·∫©m trong gi·ªè h√†ng</div>
            <button class="btn btn-link text-danger" @onclick="ClearCart">
                <i class="bi bi-trash3 me-1"></i> X√≥a to√†n b·ªô
            </button>
        </div>

        <!-- Danh s√°ch s·∫£n ph·∫©m -->
        @foreach (var item in Cart.CartItems)
        {
            <div class="border rounded-3 p-3 mb-3 d-flex flex-column flex-md-row align-items-start gap-3 shadow-sm">

                <!-- ·∫¢nh -->
                <img src="@item.ProductItemImage" style="width: 80px; height: 80px; object-fit: cover;" 
                class="rounded border" />

                <!-- N·ªôi dung ch√≠nh -->
                <div class="flex-grow-1">
                    <div class="fw-semibold">@item.ProductItemName</div>

                    <!-- Gi√° -->
                    <div class="d-flex align-items-center gap-2 mt-1">
                        <span class="fw-bold text-danger">@item.UnitPrice.ToString("N0") ƒë</span>
                    </div>
                </div>

                <!-- Thao t√°c -->
                <div class="d-flex align-items-center gap-2">
                    <button class="btn btn-outline-secondary btn-sm" @onclick="() 
                    => UpdateQuantity(item.Id, item.Quantity - 1)">-</button>
                    <input type="text" readonly class="form-control text-center" 
                    style="width: 50px;" value="@item.Quantity" />
                    <button class="btn btn-outline-secondary btn-sm" @onclick="() 
                    => UpdateQuantity(item.Id, item.Quantity + 1)">+</button>
                    <button class="btn btn-link text-danger" @onclick="() 
                    => RemoveItem(item.ProductItemId)">
                        <i class="bi bi-trash fs-5"></i>
                    </button>
                </div>
            </div>
        }

        <!-- T·ªïng ti·ªÅn + n√∫t -->
        <div class="d-flex justify-content-between align-items-center border-top pt-4 mt-4">
            <div class="fs-5 fw-bold">
                T·∫°m t√≠nh: <span class="text-danger">@Total.ToString("N0") ƒë</span>
            </div>
            <button class="btn btn-danger btn-lg px-4" @onclick="GoToOrderPage">
                Ti·∫øn h√†nh ƒë·∫∑t h√†ng
            </button>
        </div>
    </div>
}

@code {
    private GetCartByIdDto? Cart;
    private double Total => Cart?.CartItems.Sum(i => i.UnitPrice * i.Quantity) ?? 0;

    protected override async Task OnInitializedAsync()
    {
        var result = await CartService.GetCartAsync();
        if (result.IsSuccess)
        {
            Cart = result.Data;
        }
    }

    private async Task UpdateQuantity(Guid cartItemId, int quantity)
    {
        if (quantity < 1 || Cart == null) return;

        var item = Cart.CartItems.FirstOrDefault(i => i.Id == cartItemId);
        if (item == null) return;

        item.Quantity = quantity;

        var updateRequest = new UpdateCartRequest
            {
                Id = Cart.Id,
                UserId = Cart.UserId,
                CartItems = Cart.CartItems.Select(ci => new UpdateCartItemDto
                {
                    Id = ci.Id,
                    ProductId = ci.ProductItemId,
                    Quantity = ci.Quantity
                }).ToList()
            };

        var result = await CartService.UpdateCartAsync(updateRequest);
        if (result.IsSuccess)
        {
            await OnInitializedAsync();
        }
    }

    private async Task RemoveItem(Guid productItemId)
    {
        if (Cart == null) return;

        var deleteRequest = new DeleteCartItemRequest
        {
            ProductId = productItemId,
            UserId = Cart.UserId
        };

        var result = await CartService.RemoveItemAsync(deleteRequest);
        if (result.IsSuccess)
        {
            await OnInitializedAsync();
        }
    }

    private async Task ClearCart()
    {
        if (Cart == null) return;

        var result = await CartService.ClearCartAsync(Cart.UserId);
        if (result.IsSuccess)
        {
            await OnInitializedAsync();
        }
    }

    private void GoToOrderPage()
    {
        Navigation.NavigateTo("/order/create");
    }
}
