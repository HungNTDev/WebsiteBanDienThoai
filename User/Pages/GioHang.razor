@page "/cart"
@using Admin.Services
@using User.Models.Cart
@using User.Services
@inject HttpClient Http
@inject ICartService CartService
@inject IImageService ImageService
@inject NavigationManager Navigation

<h3 class="fw-bold text-center">Giỏ hàng của bạn</h3>

@if (Cart == null)
{
    <p>Đang tải giỏ hàng...</p>
}
else if (!Cart.CartItems.Any())
{
    <p>Giỏ hàng của bạn đang trống.</p>
}
else
{
    <div class="container">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                <input class="form-check-input me-2" type="checkbox" checked disabled />
                <label class="form-check-label">Bỏ chọn tất cả</label>
            </div>
            <button class="btn btn-outline-danger btn-sm" @onclick="ClearCart">
                <i class="bi bi-x-circle"></i> Xóa toàn bộ
            </button>
        </div>

        @foreach (var item in Cart.CartItems)
        {
            <div class="card mb-3 shadow-sm">
                <div class="card-body d-flex align-items-center justify-content-between">
                    <div class="d-flex align-items-center">
                        <img src="@item.ProductItemImage" width="80" class="me-3 border rounded" />
                        <div>
                            <strong>@item.ProductItemName</strong>
                            <p class="text-danger mt-1">@item.UnitPrice.ToString("N0") đ</p>
                        </div>
                    </div>

                    <div class="d-flex align-items-center">
                        <button class="btn btn-outline-secondary btn-sm" @onclick="() => UpdateQuantity(item.Id, item.Quantity - 1)">-</button>
                        <input type="text" readonly class="form-control text-center mx-2" style="width: 50px;" value="@item.Quantity" />
                        <button class="btn btn-outline-secondary btn-sm" @onclick="() => UpdateQuantity(item.Id, item.Quantity + 1)">+</button>
                        <button class="btn btn-link text-danger ms-3" @onclick="() => RemoveItem(item.ProductItemId)"><i class="bi bi-trash"></i></button>
                    </div>
                </div>
            </div>
        }

        <div class="d-flex justify-content-between align-items-center border-top pt-3 mt-3">
            <strong class="fs-5">Tạm tính: <span class="text-danger">@Total.ToString("N0") đ</span></strong>
            <button class="btn btn-danger mt-3" @onclick="GoToOrderPage">Tiến hành đặt hàng</button>
        </div>
    </div>
}

@code {
    private GetCartByIdDto? Cart;
    private double Total => Cart?.CartItems.Sum(i => i.UnitPrice * i.Quantity) ?? 0;

    protected override async Task OnInitializedAsync()
    {
        var result = await CartService.GetCartAsync();
        if (result.IsSuccess)
        {
            Cart = result.Data;
        }
    }

    private async Task UpdateQuantity(Guid cartItemId, int quantity)
    {
        if (quantity < 1 || Cart == null) return;

        var item = Cart.CartItems.FirstOrDefault(i => i.Id == cartItemId);
        if (item == null) return;

        item.Quantity = quantity;

        var updateRequest = new UpdateCartRequest
            {
                Id = Cart.Id,
                UserId = Cart.UserId,
                CartItems = Cart.CartItems.Select(ci => new UpdateCartItemDto
                {
                    Id = ci.Id,
                    ProductId = ci.ProductItemId,
                    Quantity = ci.Quantity
                }).ToList()
            };

        var result = await CartService.UpdateCartAsync(updateRequest);
        if (result.IsSuccess)
        {
            await OnInitializedAsync();
        }
    }

    private async Task RemoveItem(Guid productItemId)
    {
        if (Cart == null) return;

        var deleteRequest = new DeleteCartItemRequest
            {
                ProductId = productItemId,
                UserId = Cart.UserId
            };

        var result = await CartService.RemoveItemAsync(deleteRequest);
        if (result.IsSuccess)
        {
            await OnInitializedAsync();
        }
    }

    private async Task ClearCart()
    {
        if (Cart == null) return;

        var result = await CartService.ClearCartAsync(Cart.UserId);
        if (result.IsSuccess)
        {
            await OnInitializedAsync();
        }
    }

    private void GoToOrderPage()
    {
        Navigation.NavigateTo("/order/create");
    }
}
