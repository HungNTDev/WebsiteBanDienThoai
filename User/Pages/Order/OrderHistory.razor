@page "/order-history"
@using System.Net.Http.Headers
@using System.Text.Json
@using User.Models.Order
@using User.Models
@using User.Services
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager


@if (orders == null)
{
    <p>Đang tải dữ liệu...</p>
}
else if (!orders.Any())
{
    <p>Không có đơn hàng nào.</p>
}
else
{
    <div class="d-flex justify-content-center mt-4" >
        <div style="max-width: 700px; width: 100%;">
            <h4 class="fw-bold text-uppercase mb-4 text-start">Lịch sử đơn hàng</h4>
        </div>
    </div>


    @foreach (var order in orders)
    {
        <div class="d-flex justify-content-center">
            <a href="/order/@order.Id" class="text-decoration-none d-block text-dark" style="max-width: 700px; width: 100%;">
                <div class="card mb-4 shadow-sm border-0">
                    <div class="card-header bg-light">
                        <strong>Mã đơn:</strong> @order.Code
                        <span class="float-end">@order.OrderDate.ToString("dd/MM/yyyy HH:mm")</span>
                    </div>
                    <div class="card-body">
                        @foreach (var item in order.Items)
                        {
                            <div class="d-flex align-items-center mb-3">
                                <img src="@item.ProductImage" class="rounded border" width="64" height="64" style="object-fit: cover; margin-right: 12px;" />
                                <div class="flex-grow-1">
                                    <div class="fw-semibold">@item.ProductName</div>
                                    <div>SL: @item.Quantity x @item.UnitPrice.ToString("N0") đ</div>
                                </div>
                                <div class="fw-bold text-danger">@((item.Quantity * item.UnitPrice).ToString("N0")) đ</div>
                            </div>
                        }

                        <div class="mt-3 text-end">
                            <span class="fw-bold">Tổng cộng: </span>
                            <span class="text-danger fw-bold">@order.Total.ToString("N0") đ</span>
                            <span class="badge @GetStatusBadgeClass(order.Status) ms-3">
                                @GetStatusLabel(order.Status)
                            </span>

                        </div>
                    </div>
                </div>
            </a>
        </div>
    }



}

@code {
    private List<OrderHistoryDto>? orders;

    protected override async Task OnInitializedAsync()
    {

        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrWhiteSpace(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await Http.GetFromJsonAsync<ApiResponse<List<OrderHistoryDto>>>("api/Order/user/history");

            if (response?.IsSuccess == true && response.Data != null)
            {
                orders = response.Data;
            }
            else
            {
                Console.WriteLine("⚠️ Không thể tải đơn hàng");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ Lỗi tải đơn hàng: " + ex.Message);
        }
    }
    public enum OrderStatus
    {
        Pending,
        Confirmed,
        Paid,
        Cancelled
    }
    private string GetStatusLabel(string statusStr)
    {
        return Enum.TryParse<OrderStatus>(statusStr, out var status)
            ? status switch
            {
                OrderStatus.Pending => "Chờ xác nhận",
                OrderStatus.Confirmed => "Đã xác nhận",
                OrderStatus.Paid => "Đã thanh toán",
                OrderStatus.Cancelled => "Đã hủy",
                _ => statusStr
            }
            : statusStr;
    }

    private string GetStatusBadgeClass(string statusStr)
    {
        return Enum.TryParse<OrderStatus>(statusStr, out var status)
            ? status switch
            {
                OrderStatus.Pending => "bg-warning text-dark",
                OrderStatus.Confirmed => "bg-primary",
                OrderStatus.Paid => "bg-success",
                OrderStatus.Cancelled => "bg-secondary",
                _ => "bg-light text-dark"
            }
            : "bg-light text-dark";
    }


}
