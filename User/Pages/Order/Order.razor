@page "/order/create"
@using System.Net.Http.Headers
@using User.Models
@using User.Models.Cart
@using User.Models.Order
@using User.Services
@using static User.Pages.Order.OrderDetail
@using static User.Pages.Home
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject ICartService CartService

<h3 class="fw-bold mb-4">Xác nhận đơn hàng</h3>

@if (Cart == null || !Cart.CartItems.Any())
{
    <div class="alert alert-info">Giỏ hàng trống, không thể tạo đơn hàng.</div>
    <button class="btn btn-outline-secondary mt-2" @onclick="GoToCart">Quay lại giỏ hàng</button>
}
else if (IsSubmitting)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status"></div>
        <p class="mt-2">Đang xử lý đơn hàng của bạn...</p>
    </div>
}
else
{
    <div class="container px-4">
        <div class="row">
            <div class="col-md-12 col-lg-8 mx-auto">
                <h5 class="fw-bold mb-3">Chi tiết sản phẩm</h5>
                <div class="list-group mb-4">
                    @foreach (var item in Cart.CartItems)
                    {
                        <div class="list-group-item">
                            <div class="d-flex gap-3 align-items-center">
                                <img src="@item.ProductItemImage" width="60" height="60" class="border rounded" style="object-fit: cover;" />
                                <div class="flex-grow-1">
                                    <strong>@item.ProductItemName</strong><br />
                                    <small>SL: @item.Quantity x @item.UnitPrice.ToString("N0") đ</small>
                                </div>
                                <div class="text-end fw-bold text-danger">@item.TotalPrice.ToString("N0") đ</div>
                            </div>
                        </div>
                    }
                </div>

                <div class="card p-4 mb-4">
                    <h5 class="fw-bold">Thông tin đơn hàng</h5>
                    <p><strong>Tổng sản phẩm:</strong> @Cart.CartItems.Count</p>
                    <p><strong>Tạm tính:</strong> <span class="text-danger fw-bold">@Total.ToString("N0") đ</span></p>

                    <div class="mt-4 d-flex gap-2">
                        <button class="btn btn-danger px-4" @onclick="CreateOrder">Xác nhận đặt hàng</button>
                        <button class="btn btn-outline-secondary" @onclick="GoToCart">Quay lại giỏ hàng</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private GetCartByIdDto? Cart;
    private bool IsSubmitting = false;
    private decimal Total => Cart?.CartItems.Sum(i => (decimal)i.UnitPrice * i.Quantity) ?? 0;

    protected override async Task OnInitializedAsync()
    {
       
        var result = await CartService.GetCartAsync();
        if (result.IsSuccess)
        {
            Cart = result.Data;
        }
    }

    private async Task CreateOrder()
    {
        if (Cart == null || !Cart.CartItems.Any()) return;
        IsSubmitting = true;

        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            Navigation.NavigateTo("/login", true);
            return;
        }

        var createCommand = new CreateOrderCommand
            {
                UserId = Cart.UserId,
                OrderTotal = Total,
                Items = Cart.CartItems.Select(i => new OrderItemDto
                {
                    ProductItemId = i.ProductItemId,
                    ProductName = i.ProductItemName ?? "", // Phải có giá trị
                    ProductImage = i.ProductItemImage ?? "", // Phải có giá trị
                    Quantity = i.Quantity,
                    UnitPrice = (decimal)i.UnitPrice
                }).ToList()
            };


        // ✅ Wrap lại theo yêu cầu của API
        var payload = new { model = createCommand };

        var request = new HttpRequestMessage(HttpMethod.Post, "api/order/create")
            {
                Content = JsonContent.Create(payload)
            };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ApiResponse<OrderItemDto>>();
            if (result?.IsSuccess == true && result.Data != null)
            {
                Navigation.NavigateTo($"/order/{result.Data.Id}");
                return;
            }
        }

        // Nếu lỗi, in ra để debug thêm
        var errorContent = await response.Content.ReadAsStringAsync();
        Console.WriteLine("Order API error: " + errorContent);

        IsSubmitting = false;
    }

    private void GoToCart()
    {
        Navigation.NavigateTo("/cart");
    }
}
