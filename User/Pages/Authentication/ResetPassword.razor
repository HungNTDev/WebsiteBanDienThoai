@page "/resetpassword"
@using System.Web
@using System.ComponentModel.DataAnnotations
@using User.Models
@inject NavigationManager Navigation
@inject HttpClient Http

<div class="d-flex justify-content-center align-items-center" style="min-height: 100vh;">
    <div class="card shadow-sm p-4" style="width: 100%; max-width: 420px;">
        <div class="text-center mb-4">
            <h4 class="fw-bold">Đặt lại mật khẩu</h4>
            <p class="text-muted">Nhập mật khẩu mới cho tài khoản của bạn</p>
        </div>

        <EditForm Model="@model" OnValidSubmit="HandleReset">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <InputText @bind-Value="model.NewPassword" class="form-control" type="password" placeholder="Mật khẩu mới" />
                <ValidationMessage For="@(() => model.NewPassword)" />
            </div>

            <div class="mb-3">
                <InputText @bind-Value="model.ConfirmPassword" class="form-control" type="password" placeholder="Xác nhận mật khẩu" />
                <ValidationMessage For="@(() => model.ConfirmPassword)" />
            </div>

            <button class="btn w-100 text-white" style="background-color: #d1001c;" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                Đặt lại mật khẩu
            </button>

            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="alert mt-3 @(IsSuccess ? "alert-success" : "alert-danger")">
                    @Message
                </div>
            }
        </EditForm>
    </div>
</div>

@code {
    private ResetPasswordModel model = new();
    private bool isSubmitting = false;
    private string? Message;
    private bool IsSuccess;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("email", out var email))
        {
            model.Email = email!;
        }

        if (query.TryGetValue("token", out var token))
        {
            model.Token = token!;
        }
    }

    private async Task HandleReset()
    {
        isSubmitting = true;
        Message = null;

        var payload = new { model };
        var response = await Http.PostAsJsonAsync("api/Authentication/resetpassword", payload);
        var result = await response.Content.ReadFromJsonAsync<ApiResponse<string>>();

        if (result?.IsSuccess == true)
        {
            IsSuccess = true;
            Message = "Mật khẩu đã được đặt lại thành công.";
            await Task.Delay(1500);
            Navigation.NavigateTo("/login");
            
        }
        else
        {
            IsSuccess = false;
            Message = result?.Message ?? "Có lỗi xảy ra khi đặt lại mật khẩu.";
        }
        isSubmitting = false;
    }

    public class ResetPasswordModel
    {
        public string Email { get; set; } = string.Empty;
        public string Token { get; set; } = string.Empty;

        [Required(ErrorMessage = "Vui lòng nhập mật khẩu mới")]
        public string NewPassword { get; set; } = string.Empty;

        [Compare(nameof(NewPassword), ErrorMessage = "Mật khẩu xác nhận không khớp")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
